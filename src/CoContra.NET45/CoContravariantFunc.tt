<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace CoContra {
<#
	for (var i = 0; i != 17; i++) {
		var suffixes = Enumerable.Range(0, i).Select(x => i == 1 ? "" : (x + 1).ToString());
		var types = suffixes.Select(x => "T" + x);
		var typeArgs = String.Join(", ", types.Concat(new [] { "TResult" }));
		var invokeParams = String.Join(", ", suffixes.Select(x => "T" + x + " arg" + x));
		var invokeArgs = String.Join(", ", suffixes.Select(x => "arg" + x));
#>
	public class CoContravariantFunc<<#= typeArgs #>> : CoContravariantDelegateBase<Func<<#= typeArgs #>>, CoContravariantFunc<<#= typeArgs #>>> {
		public CoContravariantFunc() : base() {}
		public CoContravariantFunc(Func<<#= typeArgs #>> func) : base(func.CheckNull(nameof(func))) {}

		public static explicit operator CoContravariantFunc<<#= typeArgs #>>(Func<<#= typeArgs #>> func) => ConvertToCoContravariantDelegate(func);
		public static explicit operator Func<<#= typeArgs #>>(CoContravariantFunc<<#= typeArgs #>> ccfunc) => ccfunc.Invoke;

		public TResult Invoke(<#= invokeParams #>) {
			var array = GetInvocationList();
			var result = default(TResult);
			for (var i = 0; i < array.Length; i++)
				result = array[i].Invoke(<#= invokeArgs #>);
			return result;
		}

#if NET4
		public Task<TResult> InvokeAsync(<#= invokeParams + (invokeParams.Length == 0 ? "" : ", ") #>CancellationToken cancellationToken = default(CancellationToken)) => Task.Factory.StartNew(() => Invoke(<#= invokeArgs #>), cancellationToken);
#else
		public Task<TResult> InvokeAsync(<#= invokeParams + (invokeParams.Length == 0 ? "" : ", ") #>CancellationToken cancellationToken = default(CancellationToken)) => Task.Run(() => Invoke(<#= invokeArgs #>), cancellationToken);
#endif

		public IAsyncResult BeginInvoke(<#= invokeParams + (invokeParams.Length == 0 ? "" : ", ") #>AsyncCallback callback, Object state) {
			var task = InvokeAsync(<#= invokeArgs #>);
			var tcs = new TaskCompletionSource<TResult>(state);
			task.ContinueWith(t => {
				if (t.IsFaulted)
					tcs.TrySetException(t.Exception.InnerExceptions);
				else if (t.IsCanceled)
					tcs.TrySetCanceled();
				else
					tcs.TrySetResult(t.Result);
				callback?.Invoke(tcs.Task);
			}, TaskScheduler.Default);
			return tcs.Task;
		}

		public TResult EndInvoke(IAsyncResult asyncResult) => ((Task<TResult>) asyncResult).Result;
	}

<# } #>
}